AWSTemplateFormatVersion: '2010-09-09'
Description: Generates sample measurements and sends to AWS IoT SiteWise

Parameters:
  LambdaFunctionS3Bucket:
    Type: String
    Description: S3 Bucket where Lambda Function is hosted
  LambdaFunctionS3Key:
    Type: String
    Description: S3 Key for Lambda Function

Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action: sts:AssumeRole
          Principal:
            Service: lambda.amazonaws.com
      ManagedPolicyArns:
      - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
      - PolicyName: AWSIoTSiteWiseAccessPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: iotsitewise:BatchPutAssetPropertyValue
            Resource: '*'

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: generator.handler
      Runtime: python3.6
      Code:
        S3Bucket: !Ref LambdaFunctionS3Bucket
        S3Key: !Ref LambdaFunctionS3Key
      Role: !GetAtt LambdaRole.Arn

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${LambdaFunction}"
      RetentionInDays: 1

  InvokerRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Triggers a Lambda Function to send data to AWS IoT SiteWise periodically
      ScheduleExpression: 'rate(1 minute)'
      State: DISABLED
      Targets:
        - Id: 1
          Arn: !GetAtt LambdaFunction.Arn

  InvokerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt InvokerRule.Arn
