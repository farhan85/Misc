#!/usr/bin/env python3

import boto3
import json
import re
import time
from botocore.exceptions import ClientError
from dateutil.parser import parse


DATAPOINT_PATTERN = re.compile(r'\[([\d.]+)')
ALARM_STATE_MAP = {
    'ALARM': 'Active',
    'OK': 'Normal',
    'INSUFFICIENT_DATA': 'Normal',
}
OPERATOR_MAP = {
    'LessThanThreshold': 'LESS',
    'LessThanOrEqualToThreshold': 'LESS_OR_EQUAL',
    'GreaterThanOrEqualToThreshold': 'GREATER_OR_EQUAL',
    'GreaterThanThreshold': 'GREATER',
}


def new_alarm_value(alarm_state, property_value=None, operator=None, threshold_value=None):
    alarm_value = { 'stateName': alarm_state }
    if property_value is not None:
        alarm_value['ruleEvaluation'] = {
            'simpleRule': {
                'inputProperty': property_value,
                'operator': operator,
                'threshold': threshold_value
            }
        }
    return alarm_value


def new_entry(entry_id, timestamp_sec, asset_id, property_id, alarm_value):
    return {
        'entryId': str(entry_id),
        'assetId': asset_id,
        'propertyId': property_id,
        'propertyValues': [{
            'value': { 'stringValue': json.dumps(alarm_value)},
            'timestamp': {'timeInSeconds': timestamp_sec}
        }]
    }


def to_entry(cw_client, record_id, record):
    message = json.loads(record['Sns']['Message'])
    dt = parse(message['StateChangeTime'])
    cw_alarm_state = message['NewStateValue']
    sw_alarm_state = ALARM_STATE_MAP[cw_alarm_state]
    match = DATAPOINT_PATTERN.search(message['NewStateReason'])
    if match:
        property_value = float(match.group(1))
        threshold_value = message['Trigger']['Threshold']
        cw_operator = message['Trigger']['ComparisonOperator']
        sw_operator = OPERATOR_MAP[cw_operator]
        alarm_value = new_alarm_value(sw_alarm_state, property_value, sw_operator, threshold_value)
    else:
        alarm_value = new_alarm_value(sw_alarm_state)

    response = cw_client.list_tags_for_resource(ResourceARN=message['AlarmArn'])
    asset_id = [tag['Value'] for tag in response['Tags'] if tag['Key'] == 'alarm_asset_id'][0]
    property_id = [tag['Value'] for tag in response['Tags'] if tag['Key'] == 'alarm_property_id'][0]
    return new_entry(record_id, int(dt.timestamp()), asset_id, property_id, alarm_value)


def chunks(lst, n=10):
    for i in range(0, len(lst), n):
        yield lst[i:i+n]


def handler(event, context):
    print('Event:', event)
    sitewise_client = boto3.client(service_name='iotsitewise')
    cw_client = boto3.client(service_name='cloudwatch')

    entries = [to_entry(cw_client, idx, record) for idx, record in enumerate(event['Records'])]
    for batch in chunks(entries):
        print('Sending batch to Sitewise:', batch)
        try:
            response = sitewise_client.batch_put_asset_property_value(entries=batch)
        except ClientError as e:
            print('ERROR: Failed to send data to SiteWise')
            response = e.response
        print('Response:', response)
        time.sleep(0.5)
