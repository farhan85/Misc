# A CloudFormation template to create a simple test stack.
# This template creates the following:
#  - VPC
#    - Subnet-1 (private subnet)
#      - One EC2 instance
#    - Subnet-2 (public subnet)
#      - Internet Gateway
#      - NAT Gateway
#      - One EC2 instance (Bastion host)

Description: Test stack with a public and private EC2 instances
Parameters:
  AMI:
    Type: String
    Description: The AMI ID to use
  InstanceType:
    Type: String
    Default: t2.micro
    Description: The instance type to use
  KeyName:
    Type: String
    Description: The name of the EC2 key pair to use for all instances created
  AvailabilityZone:
    Type: String
    Description: The availability zone in which to launch this stack (e.g. us-east-1b)
  StackTag:
    Type: String
    Description: A tag/prefix describing what this stack is used for

Resources:
  MainVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub "${StackTag}-vpc"

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MainVpc
      AvailabilityZone: !Ref AvailabilityZone
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "${StackTag}-public-subnet"

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MainVpc
      AvailabilityZone: !Ref AvailabilityZone
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "${StackTag}-private-subnet"

  PublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MainVpc
      Tags:
        - Key: Name
          Value: !Sub "${StackTag}-public-subnet-rt"

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      SubnetId: !Ref PublicSubnet

  PrivateSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MainVpc
      Tags:
        - Key: Name
          Value: !Sub "${StackTag}-private-subnet-rt"

  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateSubnetRouteTable
      SubnetId: !Ref PrivateSubnet

  PrivateSubnetSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref MainVpc
      GroupDescription: Security group for instances in the private subnet
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: "-1"
          CidrIp: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: !Sub "${StackTag}-private-subnet-sg"

  PublicSubnetSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref MainVpc
      GroupDescription: Security group for instances in the public subnet
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: "-1"
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub "${StackTag}-public-subnet-sg"

  MainVpcInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${StackTag}-igw"

  MainVpcInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MainVpc
      InternetGatewayId: !Ref MainVpcInternetGateway

  PublicSubnetRouteToInternet:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref PublicSubnetRouteTable
      GatewayId: !Ref MainVpcInternetGateway

  NatGatewayEip:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEip.AllocationId
      SubnetId: !Ref PublicSubnet
      Tags:
        - Key: Name
          Value: !Sub "${StackTag}-natgw"

  PrivateSubnetRouteToNatGateway:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref PrivateSubnetRouteTable
      NatGatewayId: !Ref NatGateway

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/ReadOnlyAccess

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref InstanceRole
      Path: "/"

  PrivateSubnetLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      SecurityGroups:
        - !Ref PrivateSubnetSecurityGroup
      AssociatePublicIpAddress: false
      ImageId: !Ref AMI
      InstanceMonitoring: true
      IamInstanceProfile: !Ref InstanceProfile
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName

  PrivateSubnetAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref PrivateSubnetLaunchConfiguration
      VPCZoneIdentifier:
        - !Ref PrivateSubnet
      MaxSize: 1
      MinSize: 1
      DesiredCapacity: 1
      Tags:
        - Key: Name
          Value: !Sub "${StackTag}-private-inst"
          PropagateAtLaunch: true

  PublicSubnetLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      SecurityGroups:
        - !Ref PublicSubnetSecurityGroup
      AssociatePublicIpAddress: true
      ImageId: !Ref AMI
      InstanceMonitoring: true
      IamInstanceProfile: !Ref InstanceProfile
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName

  PublicSubnetAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref PublicSubnetLaunchConfiguration
      VPCZoneIdentifier:
        - !Ref PublicSubnet
      MaxSize: 1
      MinSize: 1
      DesiredCapacity: 1
      Tags:
        - Key: Name
          Value: !Sub "${StackTag}-public-inst"
          PropagateAtLaunch: true
